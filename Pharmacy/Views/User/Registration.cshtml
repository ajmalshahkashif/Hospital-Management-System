@model Pharmacy.Models.UserValidation

@{
    ViewBag.Title = "Registration";
    Layout = "~/Views/Shared/_LayoutLeftMenu.cshtml";
}

<h2>Registration</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <ol class="breadcrumb">
        <li>@Html.ActionLink("All Items", "AllItems", "Item")</li>
        <li class="active">Add Item</li>
    </ol>

    <div class="container">
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-lg-2 required", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-lg-2 required", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-6">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-lg-2 required", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control", onblur = "return calculatePurchasePrice()", @Value = "15" })
                    @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-6">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-lg-2 required", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.DropDownListFor(model => model.State, new SelectList(Enumerable.Empty<SelectListItem>()), "Please Select",
                   new { @class = "form-control", @onchange = "changeState(this.value)" })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.DropDownListFor(model => model.City, new SelectList(Enumerable.Empty<SelectListItem>()), "Please Select",
                   new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-6">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.DropDownListFor(model => model.Gender,
                   new List<SelectListItem> { new SelectListItem { Text = "Male", Value = "M" }, new SelectListItem { Text = "Female", Value = "F" } },
                   "Please Select", new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-6">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Weight, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-6">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ReasonForSeeingDoctor, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.TextAreaFor(model => model.ReasonForSeeingDoctor, 5, 34, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ReasonForSeeingDoctor, "", new { @class = "text-danger" })
                </div>
                @Html.LabelFor(model => model.Comments, htmlAttributes: new { @class = "control-label col-lg-2", @style = "font:unset" })
                <div class="col-lg-3">
                    @Html.TextAreaFor(model => model.Comments, 5, 34, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Comments, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-6">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.RoleTypeID, htmlAttributes: new { @class = "control-label col-lg-2 required" })
                <div class="col-lg-3">
                    @Html.DropDownListFor(model => model.RoleTypeID, new SelectList(Enumerable.Empty<SelectListItem>()), "Please Select",
                   new { @class = "form-control", @onchange = "getDocList(this.value)" })
                    @Html.ValidationMessageFor(model => model.RoleTypeID, "", new { @class = "text-danger" })
                </div>

                @Html.LabelFor(model => model.DoctorID, htmlAttributes: new { @class = "control-label col-lg-2" })
                <div class="col-lg-3">
                    @Html.DropDownListFor(model => model.DoctorID, new SelectList(Enumerable.Empty<SelectListItem>()), "Please Select",
                  new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DoctorID, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-6">
                </div>
            </div>


            <div class="form-group">
                <div class="col-lg-offset-2 col-lg-10">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </div>

        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "AllItems")
</div>


<script type="text/javascript">

    $(document).ready(function () {

        //Role Type ddl populated
        $.ajax({
            url: "/User/ddlRoles",
            type: "GET",
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",
            success: function (result) {
                $(result).each(function () {

                    $("#RoleTypeID").append($("<option></option>").val(this.ID).html(this.Name));
                    $('#RoleTypeID').val(1);

                });
                //$("#target").prop("selectedIndex", 0);
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });

        //State ddl populated
        $.ajax({
            url: "/User/ddlState",
            type: "GET",
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",
            success: function (result) {
                $(result).each(function () {

                    $("#State").append($("<option></option>").val(this.ID).html(this.Name));
                });
                //$("#target").prop("selectedIndex", 0);
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });

    });

    function getDocList(val) {

        debugger;
        $.ajax({
            url: "/User/ddlDoctor",
            type: "GET",
            data: { userId: val },
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",
            success: function (result) {
                $("#UserID").html("");
                $("#UserID").append($("<option></option>").html("Please Select"));
                $(result).each(function () {

                    $("#UserID").append($("<option></option>").val(this.ID).html(this.Name));
                });
                //$("#target").prop("selectedIndex", 0);
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });

    }

    function changeState(val) {

        $.ajax({
            url: "/User/ddlCity",
            type: "GET",
            data: { stateId: val },
            contentType: "application/json; charset=utf-8",
            datatype: "JSON",
            success: function (result) {
                $("#City").html("");
                $("#City").append($("<option></option>").html("Please Select"));
                $(result).each(function () {

                    $("#City").append($("<option></option>").val(this.ID).html(this.Name));
                });
                //$("#target").prop("selectedIndex", 0);
            },
            error: function (jqXhr, textStatus, errorThrown) {
                console.log(errorThrown);
            }
        });

    }

</script>